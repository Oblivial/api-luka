package de.luka.api.infotags;


import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;



@RestController	// This means that this class is a Controller
@RequestMapping(path="/tags")
public class TagController {
	@Autowired // This means to get the bean called userRepository
	   // Which is auto-generated by Spring, we will use it to handle the data
	private TagRepository tagRepository;
	
	
	@PostMapping(path="/add/single") // Map ONLY POST Requests
	public @ResponseBody String addNewTag (@RequestParam String tagName) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		if(!tagRepository.findTagLike(tagName).isPresent()) {
			Tag t = new Tag();
			t.setName(tagName);
			tagRepository.save(t);
		}
		return "Saved " + tagName;
	}
	
	@DeleteMapping(path="/delete")
	public @ResponseBody String deleteTag (@RequestParam long id) {
		tagRepository.deleteById(id);
		return "Deleted id: " + id;
	}
	
	@PostMapping(path="/add") // Map ONLY POST Requests
	public @ResponseBody String addNewTags (@RequestParam String[] tagNames) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		for(String tagName : tagNames) {
			if(!tagRepository.findTagLike(tagName).isPresent()) {
				Tag t = new Tag();
				t.setName(tagName);
				tagRepository.save(t);
			}
		}
		return "Saved";
	}
	
	@GetMapping(path="/all")
	public @ResponseBody Iterable<Tag> getAllTags() {
		// This returns a JSON or XML with the 
		return tagRepository.findAll();
	}
	
	@GetMapping(path="/mostcommon")
	public @ResponseBody Iterable<Tag> getPopularTags(){
		return tagRepository.findAllById(tagRepository.getPopularTagIDs());
	}
	
	@GetMapping(path="/{tagName}")
	public @ResponseBody Tag getTag(@PathVariable("tagName") String tagName) {
		// This returns a JSON or XML with the 
		Optional<Tag> t = tagRepository.findTagLike(tagName);
		if(t.isPresent()) {
			return t.get();
		}else {
			throw new RuntimeException("Tag not found + " + tagName);
		}
	}
}
